{"version":3,"file":"treweler-routes.js","mappings":";;;;;;AAAa;AAEb;AACA;AACA;;AACA,MAAMA,WAAN,CAAkB;EAGhBC,WAAW,GAAG;IACZC,IAAI,CAACC,GAAL,CAASC,EAAT,CAAY,MAAZ,EAAoB,YAAY;MAE9B,IAAI,CAACF,IAAI,CAACG,OAAL,CAAaH,IAAI,CAACI,SAAlB,CAAD,IAAiCJ,IAAI,CAACK,IAAL,CAAUC,SAAV,CAAoBC,MAApB,GAA6B,CAAlE,EAAqE;QACnEP,IAAI,CAACC,GAAL,CAASO,SAAT,CAAmB,iBAAnB,EAAsC;UACpCC,IAAI,EAAE,SAD8B;UAEpCJ,IAAI,EAAEL,IAAI,CAACI,SAFyB;UAGpCM,UAAU,EAAE;QAHwB,CAAtC,EADmE,CAOnE;;QACA,KAAKC,YAAL;MACD;IACF,CAZD;EAaD;;EAEiB,MAAZA,YAAY,GAAI;IACpB,IAAI;MAEF,IAAIX,IAAI,CAACK,IAAL,CAAUC,SAAd,EAAyB;QACvB;QACA,MAAM,KAAKM,aAAL,EAAN;MACD;;MAGD,IAAGZ,IAAI,CAACI,SAAL,CAAeS,QAAf,CAAwBN,MAAxB,GAAiC,CAApC,EAAuC;QACrC,KAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGd,IAAI,CAACI,SAAL,CAAeS,QAAf,CAAwBN,MAA3C,EAAmDO,CAAC,EAApD,EAAwD;UACtD,IAAGd,IAAI,CAACI,SAAL,CAAeS,QAAf,CAAwBC,CAAxB,EAA2BC,UAA3B,CAAsCC,UAAtC,KAAqD,QAAxD,EAAkE;YAChE,MAAMC,OAAO,GAAGjB,IAAI,CAACI,SAAL,CAAeS,QAAf,CAAwBC,CAAxB,EAA2BC,UAA3B,CAAsCG,QAAtD;YACAlB,IAAI,CAACC,GAAL,CAASkB,QAAT,CAAkB;cAChB,MAAO,SAAQF,OAAQ,EADP;cAEhB,QAAQ,MAFQ;cAGhB,UAAU,iBAHM;cAIhB,UAAU;gBACR,aAAa,OADL;gBAER,YAAY;cAFJ,CAJM;cAQhB,SAAS;gBACP,cAAc,CAAC,KAAD,EAAQ,YAAR,CADP;gBAEP,cAAc,CAAC,KAAD,EAAQ,YAAR,CAFP;gBAGP,gBAAgB,CAAC,KAAD,EAAQ,cAAR,CAHT;gBAIP,kBAAkB,CAAC,KAAD,EAAQ,gBAAR;cAJX,CARO;cAchB,UAAU,CAAC,IAAD,EAAOA,OAAP,EAAgB,CAAC,KAAD,EAAQ,UAAR,CAAhB;YAdM,CAAlB;UAgBD;QACF;MACF;IAIF,CAlCD,CAkCE,OAAOG,GAAP,EAAY;MACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;IACD;EACF;;EAEkB,MAAbR,aAAa,GAAI;IACrB,OAAO,IAAIW,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;MAC3CzB,IAAI,CAACK,IAAL,CAAUC,SAAV,CAAoBoB,OAApB,CAA4B,UAASrB,IAAT,EAAesB,KAAf,EAAsB;QAChD,MAAMT,QAAQ,GAAGb,IAAI,CAACa,QAAtB;QACA,MAAMU,SAAS,GAAGvB,IAAI,CAACwB,YAAvB;QACA,MAAMC,UAAU,GAAGzB,IAAI,CAACyB,UAAxB;QACA,MAAMC,YAAY,GAAG1B,IAAI,CAAC2B,QAA1B;QAEA,MAAMC,WAAW,GAAG,WAAWL,SAAS,CAACM,MAAV,CAAiBN,SAAS,CAACrB,MAAV,GAAmB,CAApC,CAA/B;QACA,MAAM4B,GAAG,GAAG,IAAIC,cAAJ,EAAZ;;QACA,IAAIR,SAAJ,EAAe;UAEbO,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBT,SAAhB;;UAEA,IAAIK,WAAJ,EAAiB;YACfE,GAAG,CAACG,YAAJ,GAAmB,UAAnB;YACAH,GAAG,CAACI,gBAAJ,CAAqB,UAArB;UACD;;UAEDJ,GAAG,CAACK,MAAJ,GAAa,MAAM;YACjB,IAAIL,GAAG,CAACM,MAAJ,IAAc,GAAd,IAAqBN,GAAG,CAACM,MAAJ,GAAa,GAAtC,EAA2C;cACzCjB,OAAO,CAACW,GAAG,CAACO,QAAL,CAAP;cACA,MAAMA,QAAQ,GAAGP,GAAG,CAACO,QAArB;cACA,IAAIC,OAAO,GAAG,KAAd;;cAEA,IAAID,QAAJ,EAAc;gBACZ,IAAIT,WAAJ,EAAiB;kBACf,IAAIW,WAAW,GAAG,EAAlB;kBACA,IAAIC,MAAM,GAAGH,QAAQ,CAACI,oBAAT,CAA8B,OAA9B,CAAb;kBACA,IAAIC,GAAJ;kBACA,IAAIC,GAAJ;;kBAEA,KAAK,IAAIC,KAAT,IAAkBJ,MAAlB,EAA0B;oBACxBE,GAAG,GAAGG,UAAU,CAACD,KAAK,CAACE,YAAN,CAAmB,KAAnB,CAAD,CAAhB;oBACAH,GAAG,GAAGE,UAAU,CAACD,KAAK,CAACE,YAAN,CAAmB,KAAnB,CAAD,CAAhB;oBACAP,WAAW,CAACQ,IAAZ,CAAiB,CAACL,GAAD,EAAMC,GAAN,CAAjB;kBACD;;kBAED,IAAIJ,WAAW,CAACrC,MAAhB,EAAwB;oBACtB,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACI,SAAL,CAAeS,QAAf,CAAwBN,MAA5C,EAAoDO,CAAC,EAArD,EAAyD;sBACvD,IAAId,IAAI,CAACI,SAAL,CAAeS,QAAf,CAAwBC,CAAxB,EAA2BC,UAA3B,CAAsCG,QAAtC,KAAmDA,QAAvD,EAAiE;wBAC/DlB,IAAI,CAACI,SAAL,CAAeS,QAAf,CAAwBC,CAAxB,EAA2BuC,QAA3B,CAAoCT,WAApC,GAAkDA,WAAlD;sBACD;oBACF;;oBACDD,OAAO,GAAG,IAAV;kBACD;gBACF,CApBD,MAoBO;kBACL,MAAMW,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWd,QAAX,CAArB;;kBACA,IAAI,CAAC1C,IAAI,CAACG,OAAL,CAAamD,YAAb,CAAL,EAAiC;oBAC/B,MAAMD,QAAQ,GAAGC,YAAY,CAACG,MAAb,CAAoB,CAApB,EAAuBJ,QAAxC;;oBACA,IAAIA,QAAJ,EAAc;sBACZ,KAAK,IAAIvC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACI,SAAL,CAAeS,QAAf,CAAwBN,MAA5C,EAAoDO,CAAC,EAArD,EAAyD;wBACvD,IAAId,IAAI,CAACI,SAAL,CAAeS,QAAf,CAAwBC,CAAxB,EAA2BC,UAA3B,CAAsCG,QAAtC,KAAmDA,QAAvD,EAAiE;0BAC/DlB,IAAI,CAACI,SAAL,CAAeS,QAAf,CAAwBC,CAAxB,EAA2BuC,QAA3B,GAAsCA,QAAtC;wBACD;sBACF;;sBACDV,OAAO,GAAG,IAAV;oBACD;kBAEF;gBACF;;gBAED,IAAIA,OAAJ,EAAa;kBACX3C,IAAI,CAACC,GAAL,CAASyD,SAAT,CAAmB,iBAAnB,EAAsCC,OAAtC,CAA8C3D,IAAI,CAACI,SAAnD;kBACAJ,IAAI,CAACC,GAAL,CAASkB,QAAT,CAAkB;oBAChB,MAAO,SAAQD,QAAS,EADR;oBAEhB,QAAQ,MAFQ;oBAGhB,UAAU,iBAHM;oBAIhB,UAAU;sBACR,aAAa,OADL;sBAER,YAAY;oBAFJ,CAJM;oBAQhB,SAAS;sBACP,cAAc,CAAC,KAAD,EAAQ,YAAR,CADP;sBAEP,cAAc,CAAC,KAAD,EAAQ,YAAR,CAFP;sBAGP,gBAAgB,CAAC,KAAD,EAAQ,cAAR,CAHT;sBAIP,kBAAkBY,UAAU,CAAC,gBAAD;oBAJrB,CARO;oBAchB,YAAY;sBACV,cAAe,GAAEC,YAAa;oBADpB,CAdI;oBAiBhB,UAAU,CACR,KADQ,EAER,CAAC,IAAD,EAAOb,QAAP,EAAiB,CAAC,WAAD,EAAc,CAAC,KAAD,EAAQ,UAAR,CAAd,CAAjB,CAFQ,EAGR,CAAC,IAAD,EAAO,SAAP,EAAkB,CAAC,KAAD,EAAQ,YAAR,CAAlB,CAHQ;kBAjBM,CAAlB;gBAuBD;cAEF;YACF,CAtED,MAsEO;cACLO,MAAM,CAACU,GAAG,CAACyB,UAAL,CAAN;YACD;UACF,CA1ED;;UA4EAzB,GAAG,CAAC0B,OAAJ,GAAc,MAAMpC,MAAM,CAACU,GAAG,CAACyB,UAAL,CAA1B;;UACAzB,GAAG,CAAC2B,IAAJ;QACD;MAEF,CAjGD;IAkGD,CAnGM,CAAP;EAqGD;;AAjKe;;AAoKlB,CAAC,CAAC,MAAM;EACNC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;IACpC,IAAIlE,WAAJ;EACD,CAFD;AAGD,CAJA,GAAD,C","sources":["webpack://treweler/./src/js/front/treweler-routes.js"],"sourcesContent":["'use strict';\r\n\r\n/**\r\n * Init All Routes For Front End\r\n */\r\nclass TWER_ROUTES {\r\n\r\n\r\n  constructor() {\r\n    TWER.map.on('load', async () => {\r\n\r\n      if (!TWER.isEmpty(TWER.routeData) || TWER.data.gpxRoutes.length > 0) {\r\n        TWER.map.addSource('locations-route', {\r\n          type: 'geojson',\r\n          data: TWER.routeData,\r\n          generateId: true\r\n        });\r\n\r\n        // Async load gpx routes from sources\r\n        this.setGpsRoutes();\r\n      }\r\n    });\r\n  }\r\n\r\n  async setGpsRoutes () {\r\n    try {\r\n\r\n      if (TWER.data.gpxRoutes) {\r\n        // Wait after routes fully loaded\r\n        await this.loadGpxRoutes();\r\n      }\r\n\r\n\r\n      if(TWER.routeData.features.length > 0) {\r\n        for(let i = 0; i < TWER.routeData.features.length; i++) {\r\n          if(TWER.routeData.features[i].properties.route_load === 'static') {\r\n            const routeId = TWER.routeData.features[i].properties.route_id;\r\n            TWER.map.addLayer({\r\n              'id': `route-${routeId}`,\r\n              'type': 'line',\r\n              'source': 'locations-route',\r\n              'layout': {\r\n                'line-join': 'round',\r\n                'line-cap': 'round'\r\n              },\r\n              'paint': {\r\n                'line-color': ['get', 'line-color'],\r\n                'line-width': ['get', 'line-width'],\r\n                'line-opacity': ['get', 'line-opacity'],\r\n                'line-dasharray': ['get', 'line-dasharray']\r\n              },\r\n              'filter': ['==', routeId, ['get', 'route_id']],\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  async loadGpxRoutes () {\r\n    return new Promise(function(resolve, reject) {\r\n      TWER.data.gpxRoutes.forEach(function(data, index) {\r\n        const route_id = data.route_id;\r\n        const route_url = data.route_source;\r\n        const route_data = data.route_data;\r\n        const metaCategory = data.category;\r\n\r\n        const is_gpx_file = '.gpx' === route_url.substr(route_url.length - 4);\r\n        const xhr = new XMLHttpRequest();\r\n        if (route_url) {\r\n\r\n          xhr.open('GET', route_url);\r\n\r\n          if (is_gpx_file) {\r\n            xhr.responseType = 'document';\r\n            xhr.overrideMimeType('text/xml');\r\n          }\r\n\r\n          xhr.onload = () => {\r\n            if (xhr.status >= 200 && xhr.status < 300) {\r\n              resolve(xhr.response);\r\n              const response = xhr.response;\r\n              let is_load = false;\r\n\r\n              if (response) {\r\n                if (is_gpx_file) {\r\n                  let coordinates = [];\r\n                  let trkpts = response.getElementsByTagName('trkpt');\r\n                  let lon;\r\n                  let lat;\r\n\r\n                  for (let trkpt of trkpts) {\r\n                    lon = parseFloat(trkpt.getAttribute('lon'));\r\n                    lat = parseFloat(trkpt.getAttribute('lat'));\r\n                    coordinates.push([lon, lat]);\r\n                  }\r\n\r\n                  if (coordinates.length) {\r\n                    for (let i = 0; i < TWER.routeData.features.length; i++) {\r\n                      if (TWER.routeData.features[i].properties.route_id === route_id) {\r\n                        TWER.routeData.features[i].geometry.coordinates = coordinates;\r\n                      }\r\n                    }\r\n                    is_load = true;\r\n                  }\r\n                } else {\r\n                  const responseJSON = JSON.parse(response);\r\n                  if (!TWER.isEmpty(responseJSON)) {\r\n                    const geometry = responseJSON.routes[0].geometry;\r\n                    if (geometry) {\r\n                      for (let i = 0; i < TWER.routeData.features.length; i++) {\r\n                        if (TWER.routeData.features[i].properties.route_id === route_id) {\r\n                          TWER.routeData.features[i].geometry = geometry;\r\n                        }\r\n                      }\r\n                      is_load = true;\r\n                    }\r\n\r\n                  }\r\n                }\r\n\r\n                if (is_load) {\r\n                  TWER.map.getSource('locations-route').setData(TWER.routeData);\r\n                  TWER.map.addLayer({\r\n                    'id': `route-${route_id}`,\r\n                    'type': 'line',\r\n                    'source': 'locations-route',\r\n                    'layout': {\r\n                      'line-join': 'round',\r\n                      'line-cap': 'round'\r\n                    },\r\n                    'paint': {\r\n                      'line-color': ['get', 'line-color'],\r\n                      'line-width': ['get', 'line-width'],\r\n                      'line-opacity': ['get', 'line-opacity'],\r\n                      'line-dasharray': route_data['line-dasharray']\r\n                    },\r\n                    'metadata': {\r\n                      'categories': `${metaCategory}`,\r\n                    },\r\n                    'filter': [\r\n                      'all',\r\n                      ['==', route_id, ['to-number', ['get', 'route_id']]],\r\n                      ['==', 'dynamic', ['get', 'route_load']],\r\n                    ],\r\n                  });\r\n                }\r\n\r\n              }\r\n            } else {\r\n              reject(xhr.statusText);\r\n            }\r\n          };\r\n\r\n          xhr.onerror = () => reject(xhr.statusText);\r\n          xhr.send();\r\n        }\r\n\r\n      });\r\n    });\r\n\r\n  }\r\n}\r\n\r\n!(() => {\r\n  window.addEventListener('load', () => {\r\n    new TWER_ROUTES();\r\n  });\r\n})();\r\n"],"names":["TWER_ROUTES","constructor","TWER","map","on","isEmpty","routeData","data","gpxRoutes","length","addSource","type","generateId","setGpsRoutes","loadGpxRoutes","features","i","properties","route_load","routeId","route_id","addLayer","err","console","log","Promise","resolve","reject","forEach","index","route_url","route_source","route_data","metaCategory","category","is_gpx_file","substr","xhr","XMLHttpRequest","open","responseType","overrideMimeType","onload","status","response","is_load","coordinates","trkpts","getElementsByTagName","lon","lat","trkpt","parseFloat","getAttribute","push","geometry","responseJSON","JSON","parse","routes","getSource","setData","statusText","onerror","send","window","addEventListener"],"sourceRoot":""}